package usecase

import (
	"{{.ModuleName}}/appcontext"
	"{{.ModuleName}}/config"
	"{{.ModuleName}}/domain"
)

//{{.DomainEntity}}Update represents the Usecase which orchestrates the {{.DomainEntity}} update in the database
type {{.DomainEntity}}Update struct {
	{{.DomainEntityLowerCamel}}Repository domain.{{.DomainEntity}}Repository
}

//Execute updates the {{.DomainEntityLowerCamel}}
func (u *{{.DomainEntity}}Update) Execute({{.DomainEntityLowerCamel}} *domain.{{.DomainEntity}}) error {
	logger := config.GetLogger
	defer logger().Sync()
	logger().Debugf("{{.DomainEntity}} %+v \n", {{.DomainEntityLowerCamel}})

	{{.DomainEntityLowerCamel}}, err = u.{{.DomainEntityLowerCamel}}Repository.Update({{.DomainEntityLowerCamel}})
	if err != nil {
		logger().Errorf("Could not update {{.DomainEntityLowerCamel}} into repository. Error %s", err.Error())
		return err
	}
	return nil
}

func build{{.DomainEntity}}UpdateUsecase() appcontext.Component {
	return &{{.DomainEntity}}Update{
		{{.DomainEntityLowerCamel}}Repository: domain.Get{{.DomainEntity}}Repository(),
	}
}

func init() {
	if config.Values.TestRun {
		return
	}
	appcontext.Current.Add(appcontext.{{.DomainEntity}}UpdateUsecase, build{{.DomainEntity}}UpdateUsecase)
}
