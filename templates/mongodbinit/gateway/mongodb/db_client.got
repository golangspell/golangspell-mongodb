package mongodb

import (
	"context"
	"errors"
	"log"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"{{.ModuleName}}/appcontext"
	"{{.ModuleName}}/config"
)

//DatabaseName in MongoDB
const DatabaseName = "{{.DatabaseName}}"

//MongoClient is a struct to keep the DB connection and URI
type MongoClient struct {
	DBURI string
	Conn  *mongo.Client
}

//buildMongoClient creates the MongoClient instance
func buildMongoClient() appcontext.Component {
	var mongoClient = MongoClient{}
	mongoClient.DBURI = config.Values.DBConnectionString
	client, err := mongo.NewClient(options.Client().ApplyURI(mongoClient.DBURI))
	if err != nil {
		log.Fatal("An error occurred while trying to open a DB connection. DBURI: " + mongoClient.DBURI + " - error message: " + err.Error())
	}
	ctx := context.Background()
	err = client.Connect(ctx)
	if err != nil {
		log.Fatal("An error occurred while trying to open a DB connection. DBURI: " + mongoClient.DBURI + " - error message: " + err.Error())
	}
	mongoClient.Conn = client
	return mongoClient
}

//StartTransactionalSession starts a Database Session with an open Transaction
func (client *MongoClient) StartTransactionalSession() (mongo.Session, error) {
	var session mongo.Session
	var err error
	if session, err = client.Conn.StartSession(); err != nil {
		return nil, errors.New("An error occurred while trying to create a DB session. Message: " + err.Error())
	}
	if err = session.StartTransaction(); err != nil {
		return nil, errors.New("An error occurred while trying to start a DB transaction. Message: " + err.Error())
	}

	return session, nil
}

//CollectionExists in the Database?
func CollectionExists(db *mongo.Database, collectionName string) (bool, error) {
	ctx := context.Background()
	options := options.ListCollectionsOptions{}
	options.SetNameOnly(true)
	cur, err := db.ListCollections(ctx, bson.M{}, &options)
	if err != nil {
		return false, errors.New("Failed to get collection names: " + err.Error())
	}
	defer cur.Close(ctx)
	for cur.Next(ctx) {
		var result string
		err := cur.Decode(&result)
		if err != nil {
			return false, err
		}
		if result == collectionName {
			return true, nil
		}
	}
	return false, nil
}

func init() {
	if config.Values.TestRun {
		return
	}

	appcontext.Current.Add(appcontext.DBClient, buildMongoClient)

	log.Println("Connected to database ")
}
