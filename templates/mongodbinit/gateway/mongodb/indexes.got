package mongodb

import (
	"context"
	"fmt"
	"time"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"{{.ModuleName}}/appcontext"
)

func addIndexIfNeeded(collectionName string, indexName string, indexDetails mongo.IndexModel) {
	dbClient := appcontext.Current.Get(appcontext.DBClient).(*MongoClient)

	ctx, cancel := context.WithTimeout(context.Background(), 300*time.Second)
	defer cancel()
	db := dbClient.Conn.Database(DatabaseName)
	col := db.Collection(collectionName)
	if col == nil {
		fmt.Printf("The collection %s was not found\n", collectionName)
		return
	}
	maxTime := 10 * time.Second
	batchSize := int32(10)
	cur, err := col.Indexes().List(ctx, &options.ListIndexesOptions{BatchSize: &batchSize, MaxTime: &maxTime})
	if err != nil {
		fmt.Printf("Database fetch error while getting the Indexes data. Message: %s\n", err.Error())
		return
	}

	defer cur.Close(ctx)

	for cur.Next(context.Background()) {
		index := bson.D{}
		err = cur.Decode(&index)
		if err != nil {
			fmt.Printf("Database fetch error while getting the Indexes data. Message: %s\n", err.Error())
			return
		}
		if index.Map()["name"] == indexName {
			fmt.Printf("index found %+v\n", index)
			return
		}
	}

	_, err = col.Indexes().CreateOne(ctx, indexDetails)
	if err != nil {
		fmt.Printf("An error while trying to create the Index %s. Message: %s\n", indexName, err.Error())
	} else {
		fmt.Printf("Index %s created for collection %s.\n", indexName, collectionName)
	}
}

func toPointerPrimitiveInt(b int32) *int32 {
	return &b
}

func toPointerPrimitiveBool(b bool) *bool {
	return &b
}

// ConfigureIndexes adds to the database the application indexes
func ConfigureIndexes() {
	//TODO: Configure here your own indexes based in the Sample indexes configuration
	//Sample index
	// indexName := "sortField1Name_1_sortField2Name_-1"
	// indexDetails := mongo.IndexModel{
	// 	Keys: bson.D{
	// 		{Key: "sortField1Name", Value: 1},  /*Ascending order*/
	// 		{Key: "sortField2Name", Value: -1}, /*Descending order*/
	// 	},
	// 	Options: &options.IndexOptions{Unique: toPointerPrimitiveBool(true), Name: &indexName},
	// }
	// addIndexIfNeeded(testEntityCollectionName, indexName, indexDetails)

	//Expire Sample Index: Deletes automatically the document from the database once the date defined at the "expireAt" field is reached
	// expireIndexName := "expireAt_1"
	// expireIndexDetails := mongo.IndexModel{
	// 	Keys: bson.D{
	// 		{Key: "expireAt", Value: 1},
	// 	},
	// 	Options: &options.IndexOptions{
	// 		Sparse:             toPointerPrimitiveBool(true),
	// 		ExpireAfterSeconds: toPointerPrimitiveInt(0),
	// 		Name:               &expireIndexName,
	// 	},
	// }
	// addIndexIfNeeded(testEntityCollectionName, expireIndexName, expireIndexDetails)

}
